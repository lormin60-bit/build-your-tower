from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import secrets
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –ë–î
def get_db_path():
    # –ù–∞ Render –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
    if 'RENDER' in os.environ:
        paths_to_try = [
            '/opt/render/project/src/bot_database.db',
            '/var/lib/render/bot_database.db',
            '/tmp/bot_database.db'
        ]
        for path in paths_to_try:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
                test_file = open(path, 'a')
                test_file.close()
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ –ë–î: {path}")
                return path
            except Exception as e:
                logger.warning(f"‚ùå –ü—É—Ç—å {path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                continue
        # Fallback
        return '/tmp/bot_database.db'
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ
        return 'bot_database.db'

DB_PATH = get_db_path()
logger.info(f"üöÄ –ò—Ç–æ–≥–æ–≤—ã–π –ø—É—Ç—å –∫ –ë–î: {DB_PATH}")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    balance INTEGER DEFAULT 0,
                    referrals INTEGER DEFAULT 0,
                    referral_code TEXT UNIQUE,
                    floors INTEGER DEFAULT 1,
                    total_referral_income INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS payments (
                    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    amount INTEGER,
                    method TEXT,
                    status TEXT DEFAULT 'completed',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS referrals (
                    referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    referrer_id INTEGER,
                    referred_id INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == max_retries - 1:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return False
            continue

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def get_or_create_user(user_id, username=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
        if not user_id:
            return None
            
        user_id = int(user_id)
        
        conn = get_db_connection()
        if not conn:
            return None
            
        cursor = conn.cursor()
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if not user:
            referral_code = secrets.token_hex(8)
            cursor.execute(
                'INSERT INTO users (user_id, username, referral_code) VALUES (?, ?, ?)',
                (user_id, username, referral_code)
            )
            conn.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT user_id, username, balance, referrals, referral_code, floors, total_referral_income 
            FROM users WHERE user_id = ?
        ''', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user:
            return {
                'user_id': user[0],
                'username': user[1],
                'balance': user[2] or 0,
                'referrals': user[3] or 0,
                'referral_code': user[4],
                'floors': user[5] or 1,
                'total_referral_income': user[6] or 0,
                'referral_link': f"https://t.me/BuildYourTowerBot?start=ref{user[4]}"
            }
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_or_create_user: {e}")
        return None

# ==================== API ENDPOINTS ====================

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "success", 
        "message": "üöÄ –°–µ—Ä–≤–µ—Ä Build Your Tower —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": datetime.now().isoformat(),
        "endpoints": [
            {"path": "/api/test", "methods": ["GET", "POST"], "description": "–¢–µ—Å—Ç API"},
            {"path": "/api/stats", "methods": ["POST"], "description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"},
            {"path": "/api/payment", "methods": ["POST"], "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"},
            {"path": "/api/buy_floor", "methods": ["POST"], "description": "–ö—É–ø–∏—Ç—å —ç—Ç–∞–∂"},
            {"path": "/api/referral", "methods": ["POST"], "description": "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"},
            {"path": "/api/debug", "methods": ["GET"], "description": "–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}
        ]
    })

@app.route('/api/test', methods=['GET', 'POST'])
def test_api():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint"""
    return jsonify({
        "status": "success", 
        "message": "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
        "timestamp": datetime.now().isoformat(),
        "database_path": DB_PATH,
        "environment": "Render" if 'RENDER' in os.environ else "Local"
    })

@app.route('/api/stats', methods=['POST'])
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'})
            
        user_id = data.get('user_id')
        
        if not user_id:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–∫–∞–∑–∞–Ω user_id'})
        
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id: {user_id}")
        
        user_data = get_or_create_user(user_id)
        
        if not user_data:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'})
        
        return jsonify({
            'status': 'success', 
            'data': user_data
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/stats: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/payment', methods=['POST'])
def handle_payment():
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'})
            
        user_id = data.get('user_id')
        amount = data.get('amount')
        method = data.get('method', 'unknown')
        
        if not user_id or not amount:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ amount'})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è amount
        try:
            amount = int(amount)
            if amount <= 0:
                return jsonify({'status': 'error', 'message': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'})
        except ValueError:
            return jsonify({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã'})
        
        logger.info(f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: user_id={user_id}, amount={amount}, method={method}")
        
        # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_or_create_user(user_id)
        if not user_data:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'})
        
        conn = get_db_connection()
        if not conn:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î'})
            
        cursor = conn.cursor()
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        cursor.execute('INSERT INTO payments (user_id, amount, method) VALUES (?, ?, ?)', 
                      (user_id, amount, method))
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        new_balance = result[0] if result else 0
        
        conn.close()
        
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: user_id={user_id}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={new_balance}")
        
        return jsonify({
            'status': 'success', 
            'new_balance': new_balance,
            'message': f'–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.!'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/payment: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/buy_floor', methods=['POST'])
def buy_floor():
    """–ü–æ–∫—É–ø–∫–∞ —ç—Ç–∞–∂–∞"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'})
            
        user_id = data.get('user_id')
        floor_number = data.get('floor_number')
        
        if not user_id or not floor_number:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ floor_number'})
        
        logger.info(f"üèóÔ∏è –ü–æ–∫—É–ø–∫–∞ —ç—Ç–∞–∂–∞: user_id={user_id}, floor_number={floor_number}")
        
        conn = get_db_connection()
        if not conn:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î'})
            
        cursor = conn.cursor()
        
        cursor.execute('SELECT balance, floors FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            conn.close()
            return jsonify({'status': 'error', 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        current_balance = user[0] or 0
        current_floors = user[1] or 1
        floor_price = 500
        
        if current_balance < floor_price:
            conn.close()
            return jsonify({'status': 'error', 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'})
        
        if floor_number != current_floors + 1:
            conn.close()
            return jsonify({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞'})
        
        # –°–ø–∏—Å–∞–Ω–∏–µ –¥–µ–Ω–µ–≥ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π
        cursor.execute('UPDATE users SET balance = balance - ?, floors = floors + 1 WHERE user_id = ?', 
                      (floor_price, user_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT balance, floors FROM users WHERE user_id = ?', (user_id,))
        updated_user = cursor.fetchone()
        
        conn.close()
        
        logger.info(f"‚úÖ –≠—Ç–∞–∂ –∫—É–ø–ª–µ–Ω: user_id={user_id}, –Ω–æ–≤—ã–µ —ç—Ç–∞–∂–∏={updated_user[1]}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={updated_user[0]}")
        
        return jsonify({
            'status': 'success',
            'new_balance': updated_user[0],
            'new_floors': updated_user[1],
            'message': f'–≠—Ç–∞–∂ {floor_number} –ø–æ—Å—Ç—Ä–æ–µ–Ω!'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/buy_floor: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/referral', methods=['POST'])
def handle_referral():
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'})
            
        referrer_code = data.get('referrer_code')
        referred_id = data.get('referred_id')
        
        if not referrer_code or not referred_id:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞'})
        
        logger.info(f"üë• –†–µ—Ñ–µ—Ä–∞–ª: referrer_code={referrer_code}, referred_id={referred_id}")
        
        conn = get_db_connection()
        if not conn:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î'})
            
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ –∫–æ–¥—É
        cursor.execute('SELECT user_id FROM users WHERE referral_code = ?', (referrer_code,))
        referrer = cursor.fetchone()
        
        if referrer:
            referrer_id = referrer[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω
            cursor.execute('SELECT * FROM referrals WHERE referred_id = ?', (referred_id,))
            existing = cursor.fetchone()
            
            if not existing and referrer_id != referred_id:
                cursor.execute('INSERT INTO referrals (referrer_id, referred_id) VALUES (?, ?)', 
                              (referrer_id, referred_id))
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                cursor.execute('UPDATE users SET referrals = referrals + 1 WHERE user_id = ?', (referrer_id,))
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
                cursor.execute('UPDATE users SET balance = balance + 100, total_referral_income = total_referral_income + 100 WHERE user_id = ?', (referrer_id,))
                cursor.execute('UPDATE users SET balance = balance + 50 WHERE user_id = ?', (referred_id,))
                
                conn.commit()
                logger.info(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: referrer_id={referrer_id}, referred_id={referred_id}")
                
        conn.close()
        return jsonify({'status': 'success', 'message': '–†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/referral: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/debug', methods=['GET'])
def debug_info():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î'})
            
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM users')
        user_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM payments')
        payment_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM referrals')
        referral_count = cursor.fetchone()[0]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        conn.close()
        
        return jsonify({
            'status': 'success',
            'debug_info': {
                'total_users': user_count,
                'total_payments': payment_count, 
                'total_referrals': referral_count,
                'tables': [table[0] for table in tables],
                'database_path': DB_PATH,
                'environment': 'Render' if 'RENDER' in os.environ else 'Local',
                'timestamp': datetime.now().isoformat()
            }
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/debug: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        conn = get_db_connection()
        if conn:
            conn.close()
            db_status = "healthy"
        else:
            db_status = "unhealthy"
            
        return jsonify({
            "status": "success",
            "health": {
                "server": "healthy",
                "database": db_status,
                "timestamp": datetime.now().isoformat()
            }
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "health": {
                "server": "healthy", 
                "database": "unhealthy",
                "error": str(e)
            }
        })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Build Your Tower...")
    logger.info(f"üìä –ü—É—Ç—å –∫ –ë–î: {DB_PATH}")
    
    if init_db():
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ë–î")